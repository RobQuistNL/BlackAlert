<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-500</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup select state
select_state = 0;
select_x_start = 0;
select_y_start = 0;
select_x_stop = 0;
select_y_stop = 0;

///An array(stack) with all the selected units.
selectedItems = ds_list_create();

///Generate motion planning grid
mp_grid = mp_grid_create(0, 0, room_width / 32, room_height /32, 32, 32)

mp_grid_add_instances(mp_grid, obj_test_block, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle select state
if (mouse_check_button_pressed(get_control(ACTION_SELECT))) {
    select_state = 1;
    select_x_start = mouse_x;
    select_y_start = mouse_y;
}

if (select_state != 0) {
    select_x_stop = mouse_x;
    select_y_stop = mouse_y;
    if (point_distance(select_x_start, select_y_start, select_x_stop, select_y_stop) &gt; 7) {
        select_state = 2;
    }
}

if (mouse_check_button_released(get_control(ACTION_SELECT))) {
    if (select_state == 2) {
        select_state = 0;
    
        with (obj_par_unit) {
            selected = false;
        }
        
        ds_list_clear(selectedItems);

        with (obj_par_unit) {
            // Rewrite this so it works nice, instead of crappy.
            if (point_in_rectangle(x, y, other.select_x_start, other.select_y_start, other.select_x_stop, other.select_y_stop)) {
                selected = true;
                ds_list_add(other.selectedItems, id);
            }
        }
        
        if (ds_list_size(selectedItems) &gt; 0) {
            //@todo -&gt; make this the right sound for the right units
            audio_play_sound(choose(snd_u_s_c_s_1, snd_u_s_c_s_2, snd_u_s_c_s_3), 1, false);
        }
    }
    
    if (select_state = 1) {
        //Action button
        ui_simple_click();
        select_state = 0;
    }
}

// Cancel button handling
if (mouse_check_button_pressed(get_control(ACTION_CANCEL))) {
    show_debug_message('Cancel event fired');
    with (obj_par_unit) {
        selected = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw select state
draw_text(10, 10, string(select_state));
if (select_state == 2) {
    draw_set_color(c_lime);
    draw_rectangle(select_x_start, select_y_start, select_x_stop, select_y_stop, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
