<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0.4;

selected = false;
action = undefined;
destination_x = undefined;
destination_y = undefined;

animation = 0;

direction = round_whole(random(360), 45);
hp = 10;

unittype = U_CNSCRPT;

path = path_add();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Unit animation cycle
//@todo -&gt; change path_speed to our _REAL_ speed.
switch (round_whole(direction, 45)) {
    case 0:
    case 360:
        animation = ANIM_WALK_R;
        if (path_speed = 0) {
            animation = ANIM_STAND_R;
        }
        break;
    case 45: 
        animation = ANIM_WALK_UR;
        if (path_speed = 0) {
            animation = ANIM_STAND_UR;
        }
        break;
    case 90: 
        animation = ANIM_WALK_U;
        if (path_speed = 0) {
            animation = ANIM_STAND_U;
        }
        break;
    case 135: 
        animation = ANIM_WALK_UL;
        if (path_speed = 0) {
            animation = ANIM_STAND_UL;
        }
        break;
    case 180: 
        animation = ANIM_WALK_L;
        if (path_speed = 0) {
            animation = ANIM_STAND_L;
        }
        break;
    case 225: 
        animation = ANIM_WALK_DL;
        if (path_speed = 0) {
            animation = ANIM_STAND_DL;
        }
        break;
    case 270: 
        animation = ANIM_WALK_D;
        if (path_speed = 0) {
            animation = ANIM_STAND_D;
        }
        break;
    case 315:
        animation = ANIM_WALK_DR;
        if (path_speed = 0) {
            animation = ANIM_STAND_DR;
        }
        break;
}

__start_image = du_anim_get(unittype, animation, ANIM_START);
__stop_image = du_anim_get(unittype, animation, ANIM_STOP);

if (image_index &gt; __stop_image) {
   image_index = __start_image;
}

if (image_index &lt; __start_image) {
   image_index = __start_image;
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Unit movement code

if (!is_undefined(action) &amp;&amp; action == ACTION_WALK) {
   if (!is_undefined(destination_x) &amp;&amp; !is_undefined(destination_y)) {

       //if (point_distance(center_x, center_y, destination_x, destination_y) &gt; 10) {
           //speed = 2;
           //direction = round_whole(point_direction(center_x, center_y, destination_x, destination_y), 45);
       //}
   }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>speed = 0;
path_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw select state and destination
if (selected) {
    draw_set_color(c_green);
    draw_rectangle(x-10, y-20, x+10, y+20, 1);

    if (!is_undefined(action) &amp;&amp; action == ACTION_WALK) {
       if (!is_undefined(destination_x) &amp;&amp; !is_undefined(destination_y)) {
           draw_set_color(c_lime);
           draw_rectangle(destination_x-2, destination_y-2, destination_x+2, destination_y+2, false);
           draw_line(x, y, destination_x, destination_y);
       }
    }

}

draw_self();

//draw_text(x, y+10, direction);
//draw_text(x, y+20, animation);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
